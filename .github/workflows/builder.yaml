name: Release and Publish Docker Image

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to fetch all tags

      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Get latest tag and bump patch version
        id: versioning
        run: |
          latest=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
          echo "Latest tag: $latest"

          if [ -z "$latest" ]; then
            new_version="v0.0.1"
          else
            IFS='.' read -r major minor patch <<<"${latest#v}"
            new_version="v$major.$minor.$((patch + 1))"
          fi

          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push versioned Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}:${{ env.NEW_VERSION }} .
          docker push ghcr.io/${{ github.repository }}:${{ env.NEW_VERSION }}

      - name: Tag and push "latest"
        run: |
          docker tag ghcr.io/${{ github.repository }}:${{ env.NEW_VERSION }} ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:latest

      - name: Create GitHub Release called "latest"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}